package minimize_malware_spread;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Solution
 */
public class Solution {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int[] parent = new int[graph.length];
        Arrays.sort(initial);
        List<Set<Integer>> nodesCount = new ArrayList<>(graph.length);
        buildRelation(graph, parent, nodesCount);
        int ans = Integer.MAX_VALUE;
        int minInfected = graph.length +1;
        for(int i = 0; i<initial.length; i++){
            Set<Integer> infectedNodes = new HashSet<>();
            for(int j = 0; j<initial.length; j++){
                if(i!=j){
                    infectedNodes.addAll(nodesCount.get(parent[initial[j]]));
                }
            }
            if(infectedNodes.size() < minInfected){
                minInfected = infectedNodes.size();
                ans = initial[i];  
            }
        }
        return ans;       
    }
    
    private void buildRelation(int[][] graph, int[] parent, List<Set<Integer>> nodesCount){
        for(int i = 0; i<graph.length; i++){
            parent[i] = i;
            nodesCount.add(new HashSet<>());
        }
        for(int i = 0; i<graph.length; i++){
            int p = Math.min(parent[i], i);
            for(int j = 0; j<graph[0].length; j++){
                if(graph[i][j] == 1){
                    int pNode = Math.min(parent[j], p);
                    parent[j]= pNode;
                    nodesCount.get(pNode).add(j);
                }
            }
        }
    }
}